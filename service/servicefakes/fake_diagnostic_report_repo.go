// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"sync"

	"github.com/jmelchio/vetlab/model"
	"github.com/jmelchio/vetlab/service"
)

type FakeDiagnosticReportRepo struct {
	CreateStub        func(model.DiagnosticReport) (*model.DiagnosticReport, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 model.DiagnosticReport
	}
	createReturns struct {
		result1 *model.DiagnosticReport
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *model.DiagnosticReport
		result2 error
	}
	UpdateStub        func(model.DiagnosticReport) (*model.DiagnosticReport, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 model.DiagnosticReport
	}
	updateReturns struct {
		result1 *model.DiagnosticReport
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *model.DiagnosticReport
		result2 error
	}
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetByIDStub        func(string) (*model.DiagnosticReport, error)
	getByIDMutex       sync.RWMutex
	getByIDArgsForCall []struct {
		arg1 string
	}
	getByIDReturns struct {
		result1 *model.DiagnosticReport
		result2 error
	}
	getByIDReturnsOnCall map[int]struct {
		result1 *model.DiagnosticReport
		result2 error
	}
	GetByOrgIDStub        func(string) ([]model.DiagnosticReport, error)
	getByOrgIDMutex       sync.RWMutex
	getByOrgIDArgsForCall []struct {
		arg1 string
	}
	getByOrgIDReturns struct {
		result1 []model.DiagnosticReport
		result2 error
	}
	getByOrgIDReturnsOnCall map[int]struct {
		result1 []model.DiagnosticReport
		result2 error
	}
	GetByUserIDStub        func(string) ([]model.DiagnosticRequest, error)
	getByUserIDMutex       sync.RWMutex
	getByUserIDArgsForCall []struct {
		arg1 string
	}
	getByUserIDReturns struct {
		result1 []model.DiagnosticRequest
		result2 error
	}
	getByUserIDReturnsOnCall map[int]struct {
		result1 []model.DiagnosticRequest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiagnosticReportRepo) Create(arg1 model.DiagnosticReport) (*model.DiagnosticReport, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 model.DiagnosticReport
	}{arg1})
	fake.recordInvocation("Create", []interface{}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *FakeDiagnosticReportRepo) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeDiagnosticReportRepo) CreateArgsForCall(i int) model.DiagnosticReport {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1
}

func (fake *FakeDiagnosticReportRepo) CreateReturns(result1 *model.DiagnosticReport, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeDiagnosticReportRepo) CreateReturnsOnCall(i int, result1 *model.DiagnosticReport, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *model.DiagnosticReport
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeDiagnosticReportRepo) Update(arg1 model.DiagnosticReport) (*model.DiagnosticReport, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 model.DiagnosticReport
	}{arg1})
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateReturns.result1, fake.updateReturns.result2
}

func (fake *FakeDiagnosticReportRepo) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeDiagnosticReportRepo) UpdateArgsForCall(i int) model.DiagnosticReport {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].arg1
}

func (fake *FakeDiagnosticReportRepo) UpdateReturns(result1 *model.DiagnosticReport, result2 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeDiagnosticReportRepo) UpdateReturnsOnCall(i int, result1 *model.DiagnosticReport, result2 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *model.DiagnosticReport
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeDiagnosticReportRepo) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeDiagnosticReportRepo) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeDiagnosticReportRepo) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].arg1
}

func (fake *FakeDiagnosticReportRepo) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDiagnosticReportRepo) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDiagnosticReportRepo) GetByID(arg1 string) (*model.DiagnosticReport, error) {
	fake.getByIDMutex.Lock()
	ret, specificReturn := fake.getByIDReturnsOnCall[len(fake.getByIDArgsForCall)]
	fake.getByIDArgsForCall = append(fake.getByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetByID", []interface{}{arg1})
	fake.getByIDMutex.Unlock()
	if fake.GetByIDStub != nil {
		return fake.GetByIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByIDReturns.result1, fake.getByIDReturns.result2
}

func (fake *FakeDiagnosticReportRepo) GetByIDCallCount() int {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	return len(fake.getByIDArgsForCall)
}

func (fake *FakeDiagnosticReportRepo) GetByIDArgsForCall(i int) string {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	return fake.getByIDArgsForCall[i].arg1
}

func (fake *FakeDiagnosticReportRepo) GetByIDReturns(result1 *model.DiagnosticReport, result2 error) {
	fake.GetByIDStub = nil
	fake.getByIDReturns = struct {
		result1 *model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeDiagnosticReportRepo) GetByIDReturnsOnCall(i int, result1 *model.DiagnosticReport, result2 error) {
	fake.GetByIDStub = nil
	if fake.getByIDReturnsOnCall == nil {
		fake.getByIDReturnsOnCall = make(map[int]struct {
			result1 *model.DiagnosticReport
			result2 error
		})
	}
	fake.getByIDReturnsOnCall[i] = struct {
		result1 *model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeDiagnosticReportRepo) GetByOrgID(arg1 string) ([]model.DiagnosticReport, error) {
	fake.getByOrgIDMutex.Lock()
	ret, specificReturn := fake.getByOrgIDReturnsOnCall[len(fake.getByOrgIDArgsForCall)]
	fake.getByOrgIDArgsForCall = append(fake.getByOrgIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetByOrgID", []interface{}{arg1})
	fake.getByOrgIDMutex.Unlock()
	if fake.GetByOrgIDStub != nil {
		return fake.GetByOrgIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByOrgIDReturns.result1, fake.getByOrgIDReturns.result2
}

func (fake *FakeDiagnosticReportRepo) GetByOrgIDCallCount() int {
	fake.getByOrgIDMutex.RLock()
	defer fake.getByOrgIDMutex.RUnlock()
	return len(fake.getByOrgIDArgsForCall)
}

func (fake *FakeDiagnosticReportRepo) GetByOrgIDArgsForCall(i int) string {
	fake.getByOrgIDMutex.RLock()
	defer fake.getByOrgIDMutex.RUnlock()
	return fake.getByOrgIDArgsForCall[i].arg1
}

func (fake *FakeDiagnosticReportRepo) GetByOrgIDReturns(result1 []model.DiagnosticReport, result2 error) {
	fake.GetByOrgIDStub = nil
	fake.getByOrgIDReturns = struct {
		result1 []model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeDiagnosticReportRepo) GetByOrgIDReturnsOnCall(i int, result1 []model.DiagnosticReport, result2 error) {
	fake.GetByOrgIDStub = nil
	if fake.getByOrgIDReturnsOnCall == nil {
		fake.getByOrgIDReturnsOnCall = make(map[int]struct {
			result1 []model.DiagnosticReport
			result2 error
		})
	}
	fake.getByOrgIDReturnsOnCall[i] = struct {
		result1 []model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeDiagnosticReportRepo) GetByUserID(arg1 string) ([]model.DiagnosticRequest, error) {
	fake.getByUserIDMutex.Lock()
	ret, specificReturn := fake.getByUserIDReturnsOnCall[len(fake.getByUserIDArgsForCall)]
	fake.getByUserIDArgsForCall = append(fake.getByUserIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetByUserID", []interface{}{arg1})
	fake.getByUserIDMutex.Unlock()
	if fake.GetByUserIDStub != nil {
		return fake.GetByUserIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByUserIDReturns.result1, fake.getByUserIDReturns.result2
}

func (fake *FakeDiagnosticReportRepo) GetByUserIDCallCount() int {
	fake.getByUserIDMutex.RLock()
	defer fake.getByUserIDMutex.RUnlock()
	return len(fake.getByUserIDArgsForCall)
}

func (fake *FakeDiagnosticReportRepo) GetByUserIDArgsForCall(i int) string {
	fake.getByUserIDMutex.RLock()
	defer fake.getByUserIDMutex.RUnlock()
	return fake.getByUserIDArgsForCall[i].arg1
}

func (fake *FakeDiagnosticReportRepo) GetByUserIDReturns(result1 []model.DiagnosticRequest, result2 error) {
	fake.GetByUserIDStub = nil
	fake.getByUserIDReturns = struct {
		result1 []model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeDiagnosticReportRepo) GetByUserIDReturnsOnCall(i int, result1 []model.DiagnosticRequest, result2 error) {
	fake.GetByUserIDStub = nil
	if fake.getByUserIDReturnsOnCall == nil {
		fake.getByUserIDReturnsOnCall = make(map[int]struct {
			result1 []model.DiagnosticRequest
			result2 error
		})
	}
	fake.getByUserIDReturnsOnCall[i] = struct {
		result1 []model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeDiagnosticReportRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	fake.getByOrgIDMutex.RLock()
	defer fake.getByOrgIDMutex.RUnlock()
	fake.getByUserIDMutex.RLock()
	defer fake.getByUserIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDiagnosticReportRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.DiagnosticReportRepo = new(FakeDiagnosticReportRepo)
