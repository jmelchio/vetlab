// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"sync"

	"github.com/jmelchio/vetlab/model"
	"github.com/jmelchio/vetlab/service"
)

type FakeUserRepo struct {
	CreateStub        func(*model.User) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 *model.User
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(*model.User) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 *model.User
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(*model.User) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 *model.User
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetByIDStub        func(uint) (*model.User, error)
	getByIDMutex       sync.RWMutex
	getByIDArgsForCall []struct {
		arg1 uint
	}
	getByIDReturns struct {
		result1 *model.User
		result2 error
	}
	getByIDReturnsOnCall map[int]struct {
		result1 *model.User
		result2 error
	}
	GetByVetOrgIDStub        func(uint) ([]model.User, error)
	getByVetOrgIDMutex       sync.RWMutex
	getByVetOrgIDArgsForCall []struct {
		arg1 uint
	}
	getByVetOrgIDReturns struct {
		result1 []model.User
		result2 error
	}
	getByVetOrgIDReturnsOnCall map[int]struct {
		result1 []model.User
		result2 error
	}
	GetByUserNameStub        func(string) (*model.User, error)
	getByUserNameMutex       sync.RWMutex
	getByUserNameArgsForCall []struct {
		arg1 string
	}
	getByUserNameReturns struct {
		result1 *model.User
		result2 error
	}
	getByUserNameReturnsOnCall map[int]struct {
		result1 *model.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserRepo) Create(arg1 *model.User) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 *model.User
	}{arg1})
	fake.recordInvocation("Create", []interface{}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeUserRepo) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeUserRepo) CreateArgsForCall(i int) *model.User {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1
}

func (fake *FakeUserRepo) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepo) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepo) Update(arg1 *model.User) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 *model.User
	}{arg1})
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateReturns.result1
}

func (fake *FakeUserRepo) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeUserRepo) UpdateArgsForCall(i int) *model.User {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].arg1
}

func (fake *FakeUserRepo) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepo) UpdateReturnsOnCall(i int, result1 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepo) Delete(arg1 *model.User) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 *model.User
	}{arg1})
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeUserRepo) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeUserRepo) DeleteArgsForCall(i int) *model.User {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].arg1
}

func (fake *FakeUserRepo) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepo) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepo) GetByID(arg1 uint) (*model.User, error) {
	fake.getByIDMutex.Lock()
	ret, specificReturn := fake.getByIDReturnsOnCall[len(fake.getByIDArgsForCall)]
	fake.getByIDArgsForCall = append(fake.getByIDArgsForCall, struct {
		arg1 uint
	}{arg1})
	fake.recordInvocation("GetByID", []interface{}{arg1})
	fake.getByIDMutex.Unlock()
	if fake.GetByIDStub != nil {
		return fake.GetByIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByIDReturns.result1, fake.getByIDReturns.result2
}

func (fake *FakeUserRepo) GetByIDCallCount() int {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	return len(fake.getByIDArgsForCall)
}

func (fake *FakeUserRepo) GetByIDArgsForCall(i int) uint {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	return fake.getByIDArgsForCall[i].arg1
}

func (fake *FakeUserRepo) GetByIDReturns(result1 *model.User, result2 error) {
	fake.GetByIDStub = nil
	fake.getByIDReturns = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) GetByIDReturnsOnCall(i int, result1 *model.User, result2 error) {
	fake.GetByIDStub = nil
	if fake.getByIDReturnsOnCall == nil {
		fake.getByIDReturnsOnCall = make(map[int]struct {
			result1 *model.User
			result2 error
		})
	}
	fake.getByIDReturnsOnCall[i] = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) GetByVetOrgID(arg1 uint) ([]model.User, error) {
	fake.getByVetOrgIDMutex.Lock()
	ret, specificReturn := fake.getByVetOrgIDReturnsOnCall[len(fake.getByVetOrgIDArgsForCall)]
	fake.getByVetOrgIDArgsForCall = append(fake.getByVetOrgIDArgsForCall, struct {
		arg1 uint
	}{arg1})
	fake.recordInvocation("GetByVetOrgID", []interface{}{arg1})
	fake.getByVetOrgIDMutex.Unlock()
	if fake.GetByVetOrgIDStub != nil {
		return fake.GetByVetOrgIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByVetOrgIDReturns.result1, fake.getByVetOrgIDReturns.result2
}

func (fake *FakeUserRepo) GetByVetOrgIDCallCount() int {
	fake.getByVetOrgIDMutex.RLock()
	defer fake.getByVetOrgIDMutex.RUnlock()
	return len(fake.getByVetOrgIDArgsForCall)
}

func (fake *FakeUserRepo) GetByVetOrgIDArgsForCall(i int) uint {
	fake.getByVetOrgIDMutex.RLock()
	defer fake.getByVetOrgIDMutex.RUnlock()
	return fake.getByVetOrgIDArgsForCall[i].arg1
}

func (fake *FakeUserRepo) GetByVetOrgIDReturns(result1 []model.User, result2 error) {
	fake.GetByVetOrgIDStub = nil
	fake.getByVetOrgIDReturns = struct {
		result1 []model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) GetByVetOrgIDReturnsOnCall(i int, result1 []model.User, result2 error) {
	fake.GetByVetOrgIDStub = nil
	if fake.getByVetOrgIDReturnsOnCall == nil {
		fake.getByVetOrgIDReturnsOnCall = make(map[int]struct {
			result1 []model.User
			result2 error
		})
	}
	fake.getByVetOrgIDReturnsOnCall[i] = struct {
		result1 []model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) GetByUserName(arg1 string) (*model.User, error) {
	fake.getByUserNameMutex.Lock()
	ret, specificReturn := fake.getByUserNameReturnsOnCall[len(fake.getByUserNameArgsForCall)]
	fake.getByUserNameArgsForCall = append(fake.getByUserNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetByUserName", []interface{}{arg1})
	fake.getByUserNameMutex.Unlock()
	if fake.GetByUserNameStub != nil {
		return fake.GetByUserNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByUserNameReturns.result1, fake.getByUserNameReturns.result2
}

func (fake *FakeUserRepo) GetByUserNameCallCount() int {
	fake.getByUserNameMutex.RLock()
	defer fake.getByUserNameMutex.RUnlock()
	return len(fake.getByUserNameArgsForCall)
}

func (fake *FakeUserRepo) GetByUserNameArgsForCall(i int) string {
	fake.getByUserNameMutex.RLock()
	defer fake.getByUserNameMutex.RUnlock()
	return fake.getByUserNameArgsForCall[i].arg1
}

func (fake *FakeUserRepo) GetByUserNameReturns(result1 *model.User, result2 error) {
	fake.GetByUserNameStub = nil
	fake.getByUserNameReturns = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) GetByUserNameReturnsOnCall(i int, result1 *model.User, result2 error) {
	fake.GetByUserNameStub = nil
	if fake.getByUserNameReturnsOnCall == nil {
		fake.getByUserNameReturnsOnCall = make(map[int]struct {
			result1 *model.User
			result2 error
		})
	}
	fake.getByUserNameReturnsOnCall[i] = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	fake.getByVetOrgIDMutex.RLock()
	defer fake.getByVetOrgIDMutex.RUnlock()
	fake.getByUserNameMutex.RLock()
	defer fake.getByUserNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.UserRepo = new(FakeUserRepo)
