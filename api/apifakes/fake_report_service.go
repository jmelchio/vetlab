// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"context"
	"sync"
	"time"

	"github.com/jmelchio/vetlab/api"
	"github.com/jmelchio/vetlab/model"
)

type FakeReportService struct {
	SubmitDiagnosticRequestStub        func(ctx context.Context, diagReq model.DiagnosticRequest) (*model.DiagnosticRequest, error)
	submitDiagnosticRequestMutex       sync.RWMutex
	submitDiagnosticRequestArgsForCall []struct {
		ctx     context.Context
		diagReq model.DiagnosticRequest
	}
	submitDiagnosticRequestReturns struct {
		result1 *model.DiagnosticRequest
		result2 error
	}
	submitDiagnosticRequestReturnsOnCall map[int]struct {
		result1 *model.DiagnosticRequest
		result2 error
	}
	FindReportByDateRangeStub        func(ctx context.Context, start time.Time, end time.Time, vetOrg model.VetOrg) ([]model.DiagnosticReport, error)
	findReportByDateRangeMutex       sync.RWMutex
	findReportByDateRangeArgsForCall []struct {
		ctx    context.Context
		start  time.Time
		end    time.Time
		vetOrg model.VetOrg
	}
	findReportByDateRangeReturns struct {
		result1 []model.DiagnosticReport
		result2 error
	}
	findReportByDateRangeReturnsOnCall map[int]struct {
		result1 []model.DiagnosticReport
		result2 error
	}
	FindReportByIDStub        func(ctx context.Context, reportID uint) (model.DiagnosticReport, error)
	findReportByIDMutex       sync.RWMutex
	findReportByIDArgsForCall []struct {
		ctx      context.Context
		reportID uint
	}
	findReportByIDReturns struct {
		result1 model.DiagnosticReport
		result2 error
	}
	findReportByIDReturnsOnCall map[int]struct {
		result1 model.DiagnosticReport
		result2 error
	}
	FindReportByVetOrgStub        func(ctx context.Context, vetOrg model.VetOrg) ([]model.DiagnosticReport, error)
	findReportByVetOrgMutex       sync.RWMutex
	findReportByVetOrgArgsForCall []struct {
		ctx    context.Context
		vetOrg model.VetOrg
	}
	findReportByVetOrgReturns struct {
		result1 []model.DiagnosticReport
		result2 error
	}
	findReportByVetOrgReturnsOnCall map[int]struct {
		result1 []model.DiagnosticReport
		result2 error
	}
	FindReportByUserStub        func(ctx context.Context, user model.User) ([]model.DiagnosticReport, error)
	findReportByUserMutex       sync.RWMutex
	findReportByUserArgsForCall []struct {
		ctx  context.Context
		user model.User
	}
	findReportByUserReturns struct {
		result1 []model.DiagnosticReport
		result2 error
	}
	findReportByUserReturnsOnCall map[int]struct {
		result1 []model.DiagnosticReport
		result2 error
	}
	FindReportByCustomerStub        func(ctx context.Context, customer model.Customer) ([]model.DiagnosticReport, error)
	findReportByCustomerMutex       sync.RWMutex
	findReportByCustomerArgsForCall []struct {
		ctx      context.Context
		customer model.Customer
	}
	findReportByCustomerReturns struct {
		result1 []model.DiagnosticReport
		result2 error
	}
	findReportByCustomerReturnsOnCall map[int]struct {
		result1 []model.DiagnosticReport
		result2 error
	}
	FindRequestByDateRangeStub        func(ctx context.Context, start time.Time, end time.Time, vetOrg model.VetOrg) ([]model.DiagnosticRequest, error)
	findRequestByDateRangeMutex       sync.RWMutex
	findRequestByDateRangeArgsForCall []struct {
		ctx    context.Context
		start  time.Time
		end    time.Time
		vetOrg model.VetOrg
	}
	findRequestByDateRangeReturns struct {
		result1 []model.DiagnosticRequest
		result2 error
	}
	findRequestByDateRangeReturnsOnCall map[int]struct {
		result1 []model.DiagnosticRequest
		result2 error
	}
	FindRequestByIDStub        func(ctx context.Context, requestID uint) (*model.DiagnosticRequest, error)
	findRequestByIDMutex       sync.RWMutex
	findRequestByIDArgsForCall []struct {
		ctx       context.Context
		requestID uint
	}
	findRequestByIDReturns struct {
		result1 *model.DiagnosticRequest
		result2 error
	}
	findRequestByIDReturnsOnCall map[int]struct {
		result1 *model.DiagnosticRequest
		result2 error
	}
	FindRequestByVetOrgStub        func(ctx context.Context, vetOrg model.VetOrg) ([]model.DiagnosticRequest, error)
	findRequestByVetOrgMutex       sync.RWMutex
	findRequestByVetOrgArgsForCall []struct {
		ctx    context.Context
		vetOrg model.VetOrg
	}
	findRequestByVetOrgReturns struct {
		result1 []model.DiagnosticRequest
		result2 error
	}
	findRequestByVetOrgReturnsOnCall map[int]struct {
		result1 []model.DiagnosticRequest
		result2 error
	}
	FindRequestByUserStub        func(ctx context.Context, user model.User) ([]model.DiagnosticRequest, error)
	findRequestByUserMutex       sync.RWMutex
	findRequestByUserArgsForCall []struct {
		ctx  context.Context
		user model.User
	}
	findRequestByUserReturns struct {
		result1 []model.DiagnosticRequest
		result2 error
	}
	findRequestByUserReturnsOnCall map[int]struct {
		result1 []model.DiagnosticRequest
		result2 error
	}
	FindRequestByCustomerStub        func(ctx context.Context, customer model.Customer) ([]model.DiagnosticRequest, error)
	findRequestByCustomerMutex       sync.RWMutex
	findRequestByCustomerArgsForCall []struct {
		ctx      context.Context
		customer model.Customer
	}
	findRequestByCustomerReturns struct {
		result1 []model.DiagnosticRequest
		result2 error
	}
	findRequestByCustomerReturnsOnCall map[int]struct {
		result1 []model.DiagnosticRequest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReportService) SubmitDiagnosticRequest(ctx context.Context, diagReq model.DiagnosticRequest) (*model.DiagnosticRequest, error) {
	fake.submitDiagnosticRequestMutex.Lock()
	ret, specificReturn := fake.submitDiagnosticRequestReturnsOnCall[len(fake.submitDiagnosticRequestArgsForCall)]
	fake.submitDiagnosticRequestArgsForCall = append(fake.submitDiagnosticRequestArgsForCall, struct {
		ctx     context.Context
		diagReq model.DiagnosticRequest
	}{ctx, diagReq})
	fake.recordInvocation("SubmitDiagnosticRequest", []interface{}{ctx, diagReq})
	fake.submitDiagnosticRequestMutex.Unlock()
	if fake.SubmitDiagnosticRequestStub != nil {
		return fake.SubmitDiagnosticRequestStub(ctx, diagReq)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.submitDiagnosticRequestReturns.result1, fake.submitDiagnosticRequestReturns.result2
}

func (fake *FakeReportService) SubmitDiagnosticRequestCallCount() int {
	fake.submitDiagnosticRequestMutex.RLock()
	defer fake.submitDiagnosticRequestMutex.RUnlock()
	return len(fake.submitDiagnosticRequestArgsForCall)
}

func (fake *FakeReportService) SubmitDiagnosticRequestArgsForCall(i int) (context.Context, model.DiagnosticRequest) {
	fake.submitDiagnosticRequestMutex.RLock()
	defer fake.submitDiagnosticRequestMutex.RUnlock()
	return fake.submitDiagnosticRequestArgsForCall[i].ctx, fake.submitDiagnosticRequestArgsForCall[i].diagReq
}

func (fake *FakeReportService) SubmitDiagnosticRequestReturns(result1 *model.DiagnosticRequest, result2 error) {
	fake.SubmitDiagnosticRequestStub = nil
	fake.submitDiagnosticRequestReturns = struct {
		result1 *model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) SubmitDiagnosticRequestReturnsOnCall(i int, result1 *model.DiagnosticRequest, result2 error) {
	fake.SubmitDiagnosticRequestStub = nil
	if fake.submitDiagnosticRequestReturnsOnCall == nil {
		fake.submitDiagnosticRequestReturnsOnCall = make(map[int]struct {
			result1 *model.DiagnosticRequest
			result2 error
		})
	}
	fake.submitDiagnosticRequestReturnsOnCall[i] = struct {
		result1 *model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindReportByDateRange(ctx context.Context, start time.Time, end time.Time, vetOrg model.VetOrg) ([]model.DiagnosticReport, error) {
	fake.findReportByDateRangeMutex.Lock()
	ret, specificReturn := fake.findReportByDateRangeReturnsOnCall[len(fake.findReportByDateRangeArgsForCall)]
	fake.findReportByDateRangeArgsForCall = append(fake.findReportByDateRangeArgsForCall, struct {
		ctx    context.Context
		start  time.Time
		end    time.Time
		vetOrg model.VetOrg
	}{ctx, start, end, vetOrg})
	fake.recordInvocation("FindReportByDateRange", []interface{}{ctx, start, end, vetOrg})
	fake.findReportByDateRangeMutex.Unlock()
	if fake.FindReportByDateRangeStub != nil {
		return fake.FindReportByDateRangeStub(ctx, start, end, vetOrg)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findReportByDateRangeReturns.result1, fake.findReportByDateRangeReturns.result2
}

func (fake *FakeReportService) FindReportByDateRangeCallCount() int {
	fake.findReportByDateRangeMutex.RLock()
	defer fake.findReportByDateRangeMutex.RUnlock()
	return len(fake.findReportByDateRangeArgsForCall)
}

func (fake *FakeReportService) FindReportByDateRangeArgsForCall(i int) (context.Context, time.Time, time.Time, model.VetOrg) {
	fake.findReportByDateRangeMutex.RLock()
	defer fake.findReportByDateRangeMutex.RUnlock()
	return fake.findReportByDateRangeArgsForCall[i].ctx, fake.findReportByDateRangeArgsForCall[i].start, fake.findReportByDateRangeArgsForCall[i].end, fake.findReportByDateRangeArgsForCall[i].vetOrg
}

func (fake *FakeReportService) FindReportByDateRangeReturns(result1 []model.DiagnosticReport, result2 error) {
	fake.FindReportByDateRangeStub = nil
	fake.findReportByDateRangeReturns = struct {
		result1 []model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindReportByDateRangeReturnsOnCall(i int, result1 []model.DiagnosticReport, result2 error) {
	fake.FindReportByDateRangeStub = nil
	if fake.findReportByDateRangeReturnsOnCall == nil {
		fake.findReportByDateRangeReturnsOnCall = make(map[int]struct {
			result1 []model.DiagnosticReport
			result2 error
		})
	}
	fake.findReportByDateRangeReturnsOnCall[i] = struct {
		result1 []model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindReportByID(ctx context.Context, reportID uint) (model.DiagnosticReport, error) {
	fake.findReportByIDMutex.Lock()
	ret, specificReturn := fake.findReportByIDReturnsOnCall[len(fake.findReportByIDArgsForCall)]
	fake.findReportByIDArgsForCall = append(fake.findReportByIDArgsForCall, struct {
		ctx      context.Context
		reportID uint
	}{ctx, reportID})
	fake.recordInvocation("FindReportByID", []interface{}{ctx, reportID})
	fake.findReportByIDMutex.Unlock()
	if fake.FindReportByIDStub != nil {
		return fake.FindReportByIDStub(ctx, reportID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findReportByIDReturns.result1, fake.findReportByIDReturns.result2
}

func (fake *FakeReportService) FindReportByIDCallCount() int {
	fake.findReportByIDMutex.RLock()
	defer fake.findReportByIDMutex.RUnlock()
	return len(fake.findReportByIDArgsForCall)
}

func (fake *FakeReportService) FindReportByIDArgsForCall(i int) (context.Context, uint) {
	fake.findReportByIDMutex.RLock()
	defer fake.findReportByIDMutex.RUnlock()
	return fake.findReportByIDArgsForCall[i].ctx, fake.findReportByIDArgsForCall[i].reportID
}

func (fake *FakeReportService) FindReportByIDReturns(result1 model.DiagnosticReport, result2 error) {
	fake.FindReportByIDStub = nil
	fake.findReportByIDReturns = struct {
		result1 model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindReportByIDReturnsOnCall(i int, result1 model.DiagnosticReport, result2 error) {
	fake.FindReportByIDStub = nil
	if fake.findReportByIDReturnsOnCall == nil {
		fake.findReportByIDReturnsOnCall = make(map[int]struct {
			result1 model.DiagnosticReport
			result2 error
		})
	}
	fake.findReportByIDReturnsOnCall[i] = struct {
		result1 model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindReportByVetOrg(ctx context.Context, vetOrg model.VetOrg) ([]model.DiagnosticReport, error) {
	fake.findReportByVetOrgMutex.Lock()
	ret, specificReturn := fake.findReportByVetOrgReturnsOnCall[len(fake.findReportByVetOrgArgsForCall)]
	fake.findReportByVetOrgArgsForCall = append(fake.findReportByVetOrgArgsForCall, struct {
		ctx    context.Context
		vetOrg model.VetOrg
	}{ctx, vetOrg})
	fake.recordInvocation("FindReportByVetOrg", []interface{}{ctx, vetOrg})
	fake.findReportByVetOrgMutex.Unlock()
	if fake.FindReportByVetOrgStub != nil {
		return fake.FindReportByVetOrgStub(ctx, vetOrg)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findReportByVetOrgReturns.result1, fake.findReportByVetOrgReturns.result2
}

func (fake *FakeReportService) FindReportByVetOrgCallCount() int {
	fake.findReportByVetOrgMutex.RLock()
	defer fake.findReportByVetOrgMutex.RUnlock()
	return len(fake.findReportByVetOrgArgsForCall)
}

func (fake *FakeReportService) FindReportByVetOrgArgsForCall(i int) (context.Context, model.VetOrg) {
	fake.findReportByVetOrgMutex.RLock()
	defer fake.findReportByVetOrgMutex.RUnlock()
	return fake.findReportByVetOrgArgsForCall[i].ctx, fake.findReportByVetOrgArgsForCall[i].vetOrg
}

func (fake *FakeReportService) FindReportByVetOrgReturns(result1 []model.DiagnosticReport, result2 error) {
	fake.FindReportByVetOrgStub = nil
	fake.findReportByVetOrgReturns = struct {
		result1 []model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindReportByVetOrgReturnsOnCall(i int, result1 []model.DiagnosticReport, result2 error) {
	fake.FindReportByVetOrgStub = nil
	if fake.findReportByVetOrgReturnsOnCall == nil {
		fake.findReportByVetOrgReturnsOnCall = make(map[int]struct {
			result1 []model.DiagnosticReport
			result2 error
		})
	}
	fake.findReportByVetOrgReturnsOnCall[i] = struct {
		result1 []model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindReportByUser(ctx context.Context, user model.User) ([]model.DiagnosticReport, error) {
	fake.findReportByUserMutex.Lock()
	ret, specificReturn := fake.findReportByUserReturnsOnCall[len(fake.findReportByUserArgsForCall)]
	fake.findReportByUserArgsForCall = append(fake.findReportByUserArgsForCall, struct {
		ctx  context.Context
		user model.User
	}{ctx, user})
	fake.recordInvocation("FindReportByUser", []interface{}{ctx, user})
	fake.findReportByUserMutex.Unlock()
	if fake.FindReportByUserStub != nil {
		return fake.FindReportByUserStub(ctx, user)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findReportByUserReturns.result1, fake.findReportByUserReturns.result2
}

func (fake *FakeReportService) FindReportByUserCallCount() int {
	fake.findReportByUserMutex.RLock()
	defer fake.findReportByUserMutex.RUnlock()
	return len(fake.findReportByUserArgsForCall)
}

func (fake *FakeReportService) FindReportByUserArgsForCall(i int) (context.Context, model.User) {
	fake.findReportByUserMutex.RLock()
	defer fake.findReportByUserMutex.RUnlock()
	return fake.findReportByUserArgsForCall[i].ctx, fake.findReportByUserArgsForCall[i].user
}

func (fake *FakeReportService) FindReportByUserReturns(result1 []model.DiagnosticReport, result2 error) {
	fake.FindReportByUserStub = nil
	fake.findReportByUserReturns = struct {
		result1 []model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindReportByUserReturnsOnCall(i int, result1 []model.DiagnosticReport, result2 error) {
	fake.FindReportByUserStub = nil
	if fake.findReportByUserReturnsOnCall == nil {
		fake.findReportByUserReturnsOnCall = make(map[int]struct {
			result1 []model.DiagnosticReport
			result2 error
		})
	}
	fake.findReportByUserReturnsOnCall[i] = struct {
		result1 []model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindReportByCustomer(ctx context.Context, customer model.Customer) ([]model.DiagnosticReport, error) {
	fake.findReportByCustomerMutex.Lock()
	ret, specificReturn := fake.findReportByCustomerReturnsOnCall[len(fake.findReportByCustomerArgsForCall)]
	fake.findReportByCustomerArgsForCall = append(fake.findReportByCustomerArgsForCall, struct {
		ctx      context.Context
		customer model.Customer
	}{ctx, customer})
	fake.recordInvocation("FindReportByCustomer", []interface{}{ctx, customer})
	fake.findReportByCustomerMutex.Unlock()
	if fake.FindReportByCustomerStub != nil {
		return fake.FindReportByCustomerStub(ctx, customer)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findReportByCustomerReturns.result1, fake.findReportByCustomerReturns.result2
}

func (fake *FakeReportService) FindReportByCustomerCallCount() int {
	fake.findReportByCustomerMutex.RLock()
	defer fake.findReportByCustomerMutex.RUnlock()
	return len(fake.findReportByCustomerArgsForCall)
}

func (fake *FakeReportService) FindReportByCustomerArgsForCall(i int) (context.Context, model.Customer) {
	fake.findReportByCustomerMutex.RLock()
	defer fake.findReportByCustomerMutex.RUnlock()
	return fake.findReportByCustomerArgsForCall[i].ctx, fake.findReportByCustomerArgsForCall[i].customer
}

func (fake *FakeReportService) FindReportByCustomerReturns(result1 []model.DiagnosticReport, result2 error) {
	fake.FindReportByCustomerStub = nil
	fake.findReportByCustomerReturns = struct {
		result1 []model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindReportByCustomerReturnsOnCall(i int, result1 []model.DiagnosticReport, result2 error) {
	fake.FindReportByCustomerStub = nil
	if fake.findReportByCustomerReturnsOnCall == nil {
		fake.findReportByCustomerReturnsOnCall = make(map[int]struct {
			result1 []model.DiagnosticReport
			result2 error
		})
	}
	fake.findReportByCustomerReturnsOnCall[i] = struct {
		result1 []model.DiagnosticReport
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindRequestByDateRange(ctx context.Context, start time.Time, end time.Time, vetOrg model.VetOrg) ([]model.DiagnosticRequest, error) {
	fake.findRequestByDateRangeMutex.Lock()
	ret, specificReturn := fake.findRequestByDateRangeReturnsOnCall[len(fake.findRequestByDateRangeArgsForCall)]
	fake.findRequestByDateRangeArgsForCall = append(fake.findRequestByDateRangeArgsForCall, struct {
		ctx    context.Context
		start  time.Time
		end    time.Time
		vetOrg model.VetOrg
	}{ctx, start, end, vetOrg})
	fake.recordInvocation("FindRequestByDateRange", []interface{}{ctx, start, end, vetOrg})
	fake.findRequestByDateRangeMutex.Unlock()
	if fake.FindRequestByDateRangeStub != nil {
		return fake.FindRequestByDateRangeStub(ctx, start, end, vetOrg)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findRequestByDateRangeReturns.result1, fake.findRequestByDateRangeReturns.result2
}

func (fake *FakeReportService) FindRequestByDateRangeCallCount() int {
	fake.findRequestByDateRangeMutex.RLock()
	defer fake.findRequestByDateRangeMutex.RUnlock()
	return len(fake.findRequestByDateRangeArgsForCall)
}

func (fake *FakeReportService) FindRequestByDateRangeArgsForCall(i int) (context.Context, time.Time, time.Time, model.VetOrg) {
	fake.findRequestByDateRangeMutex.RLock()
	defer fake.findRequestByDateRangeMutex.RUnlock()
	return fake.findRequestByDateRangeArgsForCall[i].ctx, fake.findRequestByDateRangeArgsForCall[i].start, fake.findRequestByDateRangeArgsForCall[i].end, fake.findRequestByDateRangeArgsForCall[i].vetOrg
}

func (fake *FakeReportService) FindRequestByDateRangeReturns(result1 []model.DiagnosticRequest, result2 error) {
	fake.FindRequestByDateRangeStub = nil
	fake.findRequestByDateRangeReturns = struct {
		result1 []model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindRequestByDateRangeReturnsOnCall(i int, result1 []model.DiagnosticRequest, result2 error) {
	fake.FindRequestByDateRangeStub = nil
	if fake.findRequestByDateRangeReturnsOnCall == nil {
		fake.findRequestByDateRangeReturnsOnCall = make(map[int]struct {
			result1 []model.DiagnosticRequest
			result2 error
		})
	}
	fake.findRequestByDateRangeReturnsOnCall[i] = struct {
		result1 []model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindRequestByID(ctx context.Context, requestID uint) (*model.DiagnosticRequest, error) {
	fake.findRequestByIDMutex.Lock()
	ret, specificReturn := fake.findRequestByIDReturnsOnCall[len(fake.findRequestByIDArgsForCall)]
	fake.findRequestByIDArgsForCall = append(fake.findRequestByIDArgsForCall, struct {
		ctx       context.Context
		requestID uint
	}{ctx, requestID})
	fake.recordInvocation("FindRequestByID", []interface{}{ctx, requestID})
	fake.findRequestByIDMutex.Unlock()
	if fake.FindRequestByIDStub != nil {
		return fake.FindRequestByIDStub(ctx, requestID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findRequestByIDReturns.result1, fake.findRequestByIDReturns.result2
}

func (fake *FakeReportService) FindRequestByIDCallCount() int {
	fake.findRequestByIDMutex.RLock()
	defer fake.findRequestByIDMutex.RUnlock()
	return len(fake.findRequestByIDArgsForCall)
}

func (fake *FakeReportService) FindRequestByIDArgsForCall(i int) (context.Context, uint) {
	fake.findRequestByIDMutex.RLock()
	defer fake.findRequestByIDMutex.RUnlock()
	return fake.findRequestByIDArgsForCall[i].ctx, fake.findRequestByIDArgsForCall[i].requestID
}

func (fake *FakeReportService) FindRequestByIDReturns(result1 *model.DiagnosticRequest, result2 error) {
	fake.FindRequestByIDStub = nil
	fake.findRequestByIDReturns = struct {
		result1 *model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindRequestByIDReturnsOnCall(i int, result1 *model.DiagnosticRequest, result2 error) {
	fake.FindRequestByIDStub = nil
	if fake.findRequestByIDReturnsOnCall == nil {
		fake.findRequestByIDReturnsOnCall = make(map[int]struct {
			result1 *model.DiagnosticRequest
			result2 error
		})
	}
	fake.findRequestByIDReturnsOnCall[i] = struct {
		result1 *model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindRequestByVetOrg(ctx context.Context, vetOrg model.VetOrg) ([]model.DiagnosticRequest, error) {
	fake.findRequestByVetOrgMutex.Lock()
	ret, specificReturn := fake.findRequestByVetOrgReturnsOnCall[len(fake.findRequestByVetOrgArgsForCall)]
	fake.findRequestByVetOrgArgsForCall = append(fake.findRequestByVetOrgArgsForCall, struct {
		ctx    context.Context
		vetOrg model.VetOrg
	}{ctx, vetOrg})
	fake.recordInvocation("FindRequestByVetOrg", []interface{}{ctx, vetOrg})
	fake.findRequestByVetOrgMutex.Unlock()
	if fake.FindRequestByVetOrgStub != nil {
		return fake.FindRequestByVetOrgStub(ctx, vetOrg)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findRequestByVetOrgReturns.result1, fake.findRequestByVetOrgReturns.result2
}

func (fake *FakeReportService) FindRequestByVetOrgCallCount() int {
	fake.findRequestByVetOrgMutex.RLock()
	defer fake.findRequestByVetOrgMutex.RUnlock()
	return len(fake.findRequestByVetOrgArgsForCall)
}

func (fake *FakeReportService) FindRequestByVetOrgArgsForCall(i int) (context.Context, model.VetOrg) {
	fake.findRequestByVetOrgMutex.RLock()
	defer fake.findRequestByVetOrgMutex.RUnlock()
	return fake.findRequestByVetOrgArgsForCall[i].ctx, fake.findRequestByVetOrgArgsForCall[i].vetOrg
}

func (fake *FakeReportService) FindRequestByVetOrgReturns(result1 []model.DiagnosticRequest, result2 error) {
	fake.FindRequestByVetOrgStub = nil
	fake.findRequestByVetOrgReturns = struct {
		result1 []model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindRequestByVetOrgReturnsOnCall(i int, result1 []model.DiagnosticRequest, result2 error) {
	fake.FindRequestByVetOrgStub = nil
	if fake.findRequestByVetOrgReturnsOnCall == nil {
		fake.findRequestByVetOrgReturnsOnCall = make(map[int]struct {
			result1 []model.DiagnosticRequest
			result2 error
		})
	}
	fake.findRequestByVetOrgReturnsOnCall[i] = struct {
		result1 []model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindRequestByUser(ctx context.Context, user model.User) ([]model.DiagnosticRequest, error) {
	fake.findRequestByUserMutex.Lock()
	ret, specificReturn := fake.findRequestByUserReturnsOnCall[len(fake.findRequestByUserArgsForCall)]
	fake.findRequestByUserArgsForCall = append(fake.findRequestByUserArgsForCall, struct {
		ctx  context.Context
		user model.User
	}{ctx, user})
	fake.recordInvocation("FindRequestByUser", []interface{}{ctx, user})
	fake.findRequestByUserMutex.Unlock()
	if fake.FindRequestByUserStub != nil {
		return fake.FindRequestByUserStub(ctx, user)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findRequestByUserReturns.result1, fake.findRequestByUserReturns.result2
}

func (fake *FakeReportService) FindRequestByUserCallCount() int {
	fake.findRequestByUserMutex.RLock()
	defer fake.findRequestByUserMutex.RUnlock()
	return len(fake.findRequestByUserArgsForCall)
}

func (fake *FakeReportService) FindRequestByUserArgsForCall(i int) (context.Context, model.User) {
	fake.findRequestByUserMutex.RLock()
	defer fake.findRequestByUserMutex.RUnlock()
	return fake.findRequestByUserArgsForCall[i].ctx, fake.findRequestByUserArgsForCall[i].user
}

func (fake *FakeReportService) FindRequestByUserReturns(result1 []model.DiagnosticRequest, result2 error) {
	fake.FindRequestByUserStub = nil
	fake.findRequestByUserReturns = struct {
		result1 []model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindRequestByUserReturnsOnCall(i int, result1 []model.DiagnosticRequest, result2 error) {
	fake.FindRequestByUserStub = nil
	if fake.findRequestByUserReturnsOnCall == nil {
		fake.findRequestByUserReturnsOnCall = make(map[int]struct {
			result1 []model.DiagnosticRequest
			result2 error
		})
	}
	fake.findRequestByUserReturnsOnCall[i] = struct {
		result1 []model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindRequestByCustomer(ctx context.Context, customer model.Customer) ([]model.DiagnosticRequest, error) {
	fake.findRequestByCustomerMutex.Lock()
	ret, specificReturn := fake.findRequestByCustomerReturnsOnCall[len(fake.findRequestByCustomerArgsForCall)]
	fake.findRequestByCustomerArgsForCall = append(fake.findRequestByCustomerArgsForCall, struct {
		ctx      context.Context
		customer model.Customer
	}{ctx, customer})
	fake.recordInvocation("FindRequestByCustomer", []interface{}{ctx, customer})
	fake.findRequestByCustomerMutex.Unlock()
	if fake.FindRequestByCustomerStub != nil {
		return fake.FindRequestByCustomerStub(ctx, customer)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findRequestByCustomerReturns.result1, fake.findRequestByCustomerReturns.result2
}

func (fake *FakeReportService) FindRequestByCustomerCallCount() int {
	fake.findRequestByCustomerMutex.RLock()
	defer fake.findRequestByCustomerMutex.RUnlock()
	return len(fake.findRequestByCustomerArgsForCall)
}

func (fake *FakeReportService) FindRequestByCustomerArgsForCall(i int) (context.Context, model.Customer) {
	fake.findRequestByCustomerMutex.RLock()
	defer fake.findRequestByCustomerMutex.RUnlock()
	return fake.findRequestByCustomerArgsForCall[i].ctx, fake.findRequestByCustomerArgsForCall[i].customer
}

func (fake *FakeReportService) FindRequestByCustomerReturns(result1 []model.DiagnosticRequest, result2 error) {
	fake.FindRequestByCustomerStub = nil
	fake.findRequestByCustomerReturns = struct {
		result1 []model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) FindRequestByCustomerReturnsOnCall(i int, result1 []model.DiagnosticRequest, result2 error) {
	fake.FindRequestByCustomerStub = nil
	if fake.findRequestByCustomerReturnsOnCall == nil {
		fake.findRequestByCustomerReturnsOnCall = make(map[int]struct {
			result1 []model.DiagnosticRequest
			result2 error
		})
	}
	fake.findRequestByCustomerReturnsOnCall[i] = struct {
		result1 []model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.submitDiagnosticRequestMutex.RLock()
	defer fake.submitDiagnosticRequestMutex.RUnlock()
	fake.findReportByDateRangeMutex.RLock()
	defer fake.findReportByDateRangeMutex.RUnlock()
	fake.findReportByIDMutex.RLock()
	defer fake.findReportByIDMutex.RUnlock()
	fake.findReportByVetOrgMutex.RLock()
	defer fake.findReportByVetOrgMutex.RUnlock()
	fake.findReportByUserMutex.RLock()
	defer fake.findReportByUserMutex.RUnlock()
	fake.findReportByCustomerMutex.RLock()
	defer fake.findReportByCustomerMutex.RUnlock()
	fake.findRequestByDateRangeMutex.RLock()
	defer fake.findRequestByDateRangeMutex.RUnlock()
	fake.findRequestByIDMutex.RLock()
	defer fake.findRequestByIDMutex.RUnlock()
	fake.findRequestByVetOrgMutex.RLock()
	defer fake.findRequestByVetOrgMutex.RUnlock()
	fake.findRequestByUserMutex.RLock()
	defer fake.findRequestByUserMutex.RUnlock()
	fake.findRequestByCustomerMutex.RLock()
	defer fake.findRequestByCustomerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReportService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.ReportService = new(FakeReportService)
