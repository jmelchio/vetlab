// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"sync"

	"github.com/jmelchio/vetlab/api"
	"github.com/jmelchio/vetlab/model"
)

type FakeReportService struct {
	SubmitDiagnosticRequestStub        func(model.DiagnosticRequest) (model.DiagnosticRequest, error)
	submitDiagnosticRequestMutex       sync.RWMutex
	submitDiagnosticRequestArgsForCall []struct {
		arg1 model.DiagnosticRequest
	}
	submitDiagnosticRequestReturns struct {
		result1 model.DiagnosticRequest
		result2 error
	}
	submitDiagnosticRequestReturnsOnCall map[int]struct {
		result1 model.DiagnosticRequest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReportService) SubmitDiagnosticRequest(arg1 model.DiagnosticRequest) (model.DiagnosticRequest, error) {
	fake.submitDiagnosticRequestMutex.Lock()
	ret, specificReturn := fake.submitDiagnosticRequestReturnsOnCall[len(fake.submitDiagnosticRequestArgsForCall)]
	fake.submitDiagnosticRequestArgsForCall = append(fake.submitDiagnosticRequestArgsForCall, struct {
		arg1 model.DiagnosticRequest
	}{arg1})
	fake.recordInvocation("SubmitDiagnosticRequest", []interface{}{arg1})
	fake.submitDiagnosticRequestMutex.Unlock()
	if fake.SubmitDiagnosticRequestStub != nil {
		return fake.SubmitDiagnosticRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.submitDiagnosticRequestReturns.result1, fake.submitDiagnosticRequestReturns.result2
}

func (fake *FakeReportService) SubmitDiagnosticRequestCallCount() int {
	fake.submitDiagnosticRequestMutex.RLock()
	defer fake.submitDiagnosticRequestMutex.RUnlock()
	return len(fake.submitDiagnosticRequestArgsForCall)
}

func (fake *FakeReportService) SubmitDiagnosticRequestArgsForCall(i int) model.DiagnosticRequest {
	fake.submitDiagnosticRequestMutex.RLock()
	defer fake.submitDiagnosticRequestMutex.RUnlock()
	return fake.submitDiagnosticRequestArgsForCall[i].arg1
}

func (fake *FakeReportService) SubmitDiagnosticRequestReturns(result1 model.DiagnosticRequest, result2 error) {
	fake.SubmitDiagnosticRequestStub = nil
	fake.submitDiagnosticRequestReturns = struct {
		result1 model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) SubmitDiagnosticRequestReturnsOnCall(i int, result1 model.DiagnosticRequest, result2 error) {
	fake.SubmitDiagnosticRequestStub = nil
	if fake.submitDiagnosticRequestReturnsOnCall == nil {
		fake.submitDiagnosticRequestReturnsOnCall = make(map[int]struct {
			result1 model.DiagnosticRequest
			result2 error
		})
	}
	fake.submitDiagnosticRequestReturnsOnCall[i] = struct {
		result1 model.DiagnosticRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.submitDiagnosticRequestMutex.RLock()
	defer fake.submitDiagnosticRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReportService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.ReportService = new(FakeReportService)
